// <auto-generated />
using System;
using Baitkm.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Baitkm.DAL.Migrations
{
    [DbContext(typeof(BaitkmDbContext))]
    [Migration("20211022122108_remove-table-watched")]
    partial class removetablewatched
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Baitkm.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAr")
                        .HasMaxLength(300);

                    b.Property<string>("AddressEn")
                        .HasMaxLength(300);

                    b.Property<DateTime>("AnnouncementApprovedDay");

                    b.Property<DateTime>("AnnouncementChangedDay");

                    b.Property<int>("AnnouncementEstateType");

                    b.Property<int?>("AnnouncementRentType");

                    b.Property<int?>("AnnouncementResidentialType");

                    b.Property<int>("AnnouncementStatus");

                    b.Property<DateTime>("AnnouncementStatusLastDay");

                    b.Property<int>("AnnouncementType");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("BalconyArea");

                    b.Property<string>("BasePhoto");

                    b.Property<int>("BathroomCount");

                    b.Property<int>("BedroomCount");

                    b.Property<int?>("BuildingAge");

                    b.Property<int>("CityId");

                    b.Property<int?>("CommercialType");

                    b.Property<int?>("ConstructionStatus");

                    b.Property<int>("CountryId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("DescriptionArabian")
                        .HasMaxLength(2000);

                    b.Property<string>("DisctrictName")
                        .HasMaxLength(300);

                    b.Property<string>("District")
                        .HasMaxLength(300);

                    b.Property<int?>("FacadeType");

                    b.Property<bool>("FireSystem");

                    b.Property<int>("Floor");

                    b.Property<int?>("FurnishingStatus");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDraft");

                    b.Property<bool>("IsOtherPeriod");

                    b.Property<decimal?>("KitchenArea");

                    b.Property<bool>("LaborResidence");

                    b.Property<int?>("LandCategory");

                    b.Property<int?>("LandNumber");

                    b.Property<int?>("LandType");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("LaundryArea");

                    b.Property<decimal?>("LivingArea");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("MeterPrice");

                    b.Property<int?>("NumberOfAppartment");

                    b.Property<int?>("NumberOfFloors");

                    b.Property<int?>("NumberOfShop");

                    b.Property<int?>("NumberOfUnits");

                    b.Property<int?>("NumberOfVilla");

                    b.Property<int?>("NumberOfWareHouse");

                    b.Property<bool>("OfficeSpace");

                    b.Property<int?>("OwnerShip");

                    b.Property<int?>("PlanNumber");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<double>("Rating");

                    b.Property<int?>("SaleType");

                    b.Property<int?>("SittingCount");

                    b.Property<decimal?>("StreetWidth");

                    b.Property<string>("Title")
                        .HasMaxLength(1000);

                    b.Property<string>("TitleArabian")
                        .HasMaxLength(1000);

                    b.Property<bool>("TopAnnouncement");

                    b.Property<DateTime>("TopAnnouncementDayFrom");

                    b.Property<DateTime>("TopAnnouncementDayTo");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.Property<int>("ViewsCount");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Baitkm.Entities.AnnouncementFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("FeatureType");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Baitkm.Entities.AnnouncementReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ReportAnnouncementStatus");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("AnnouncementReports");
                });

            modelBuilder.Entity("Baitkm.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementId");

                    b.Property<int>("AttachmentType");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UploadType");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Baitkm.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameAr");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Baitkm.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<int>("Language");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Baitkm.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnnouncementCreatorConversationIsDeleted");

                    b.Property<int>("AnnouncementCreatorId");

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("QuestionerConversationIsDeleted");

                    b.Property<int>("QuestionerId");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementCreatorId");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("QuestionerId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Baitkm.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameAr");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Baitkm.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CodeAr");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NumericCode");

                    b.Property<int>("RequestId");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Baitkm.Entities.DeviceToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OsType");

                    b.Property<string>("Token")
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("Baitkm.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("EmailText")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Baitkm.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Baitkm.Entities.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityType");

                    b.Property<int>("AnnouncementId");

                    b.Property<string>("AnnouncementPhoto")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGuest");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("Facts");
                });

            modelBuilder.Entity("Baitkm.Entities.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourite");
                });

            modelBuilder.Entity("Baitkm.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OsType");

                    b.Property<string>("Token")
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Baitkm.Entities.HomePageCoverImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsBase");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("HomePageCoverImages");
                });

            modelBuilder.Entity("Baitkm.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConversationId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<long>("FileLength");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSeen");

                    b.Property<int>("MessageBodyType");

                    b.Property<string>("MessageText")
                        .HasMaxLength(1000);

                    b.Property<int>("ReciverId");

                    b.Property<bool>("ReciverMessageIsDeleted");

                    b.Property<int?>("ReplayMessageId");

                    b.Property<int>("SenderId");

                    b.Property<bool>("SenderMessageIsDeleted");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Baitkm.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("NotificationType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Baitkm.Entities.NotificationTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Language");

                    b.Property<int>("NotificationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTranslate");
                });

            modelBuilder.Entity("Baitkm.Entities.Password", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("LoginProvider");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UniqueIdentifier")
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Baitkm.Entities.PersonNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSeen");

                    b.Property<int?>("NotificationId");

                    b.Property<int?>("PushNotificationId");

                    b.Property<int?>("SenderId");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PushNotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonNotifications");
                });

            modelBuilder.Entity("Baitkm.Entities.PersonOtherSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaUnit");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Language");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GuestId")
                        .IsUnique()
                        .HasFilter("[GuestId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PersonOtherSettings");
                });

            modelBuilder.Entity("Baitkm.Entities.PersonSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("SubscriptionsType");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonSettings");
                });

            modelBuilder.Entity("Baitkm.Entities.PhoneCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Country");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("PhoneCodes");
                });

            modelBuilder.Entity("Baitkm.Entities.PushNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PushNotificationActionType");

                    b.Property<int>("PushNotificationStatusType");

                    b.Property<int?>("PushNotificationUserType");

                    b.Property<DateTime>("SendingDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("PushNotifications");
                });

            modelBuilder.Entity("Baitkm.Entities.PushNotificationTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Language");

                    b.Property<int>("PushNotificationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("PushNotificationId");

                    b.ToTable("PushNotificationTranslate");
                });

            modelBuilder.Entity("Baitkm.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Baitkm.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Rat");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Baitkm.Entities.SaveFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementEstateType");

                    b.Property<int?>("AnnouncementRentType");

                    b.Property<int?>("AnnouncementResidentialType");

                    b.Property<int?>("AnnouncementType");

                    b.Property<int?>("BathroomCount");

                    b.Property<int?>("BedroomCount");

                    b.Property<int?>("BuildingAge");

                    b.Property<int?>("CityId");

                    b.Property<string>("CityName");

                    b.Property<int?>("CommercialType");

                    b.Property<int?>("ConstructionStatus");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CountryName");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Description");

                    b.Property<int?>("FacadeType");

                    b.Property<int>("FilterCount");

                    b.Property<int?>("FurnishingStatus");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("LandCategory");

                    b.Property<int?>("LandType");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("MaxArea");

                    b.Property<decimal?>("MaxMeterPrice");

                    b.Property<decimal?>("MinArea");

                    b.Property<decimal?>("MinMeterPrice");

                    b.Property<int?>("OwnerShip");

                    b.Property<decimal?>("PriceFrom");

                    b.Property<decimal?>("PriceTo");

                    b.Property<int?>("SaleType");

                    b.Property<string>("SaveFilterName")
                        .HasMaxLength(100);

                    b.Property<string>("Search")
                        .HasMaxLength(100);

                    b.Property<int?>("SittingCount");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("SaveFilters");
                });

            modelBuilder.Entity("Baitkm.Entities.SaveFilterFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("FeatureType");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("SaveFilterId");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.HasKey("Id");

                    b.HasIndex("SaveFilterId");

                    b.ToTable("SaveFilterFeatures");
                });

            modelBuilder.Entity("Baitkm.Entities.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Baitkm.Entities.SubscribeAnnouncement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("AnnouncementEstateType");

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("AnnouncementType");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscribeAnnouncements");
                });

            modelBuilder.Entity("Baitkm.Entities.SupportConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GuestId")
                        .IsUnique()
                        .HasFilter("[GuestId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("SupportConversations");
                });

            modelBuilder.Entity("Baitkm.Entities.SupportMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<long>("FileLength");

                    b.Property<int?>("GuestSenderId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSeen");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int?>("ReplayMessageId");

                    b.Property<int>("SupportConversationId");

                    b.Property<int>("SupportMessageBodyType");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserSenderId");

                    b.HasKey("Id");

                    b.HasIndex("GuestSenderId");

                    b.HasIndex("SupportConversationId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Baitkm.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("ForgotKey")
                        .HasMaxLength(100);

                    b.Property<int>("ForgotPasswordVerified");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocal");

                    b.Property<int>("OsType");

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(10);

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(1000);

                    b.Property<int>("RoleEnum");

                    b.Property<DateTime>("UnBlockDate");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserStatusType");

                    b.Property<int>("VerifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Baitkm.Entities.UserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Long")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("Baitkm.Entities.Verified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRegistered");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int>("VerifiedBy");

                    b.Property<int>("VerifiedType");

                    b.HasKey("Id");

                    b.ToTable("Verifieds");
                });

            modelBuilder.Entity("Baitkm.Entities.ViewedAnnouncement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewedAnnouncement");
                });

            modelBuilder.Entity("Baitkm.Entities.Watched", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int?>("GuestId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Watcheds");
                });

            modelBuilder.Entity("Baitkm.Entities.Announcement", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Baitkm.Entities.AnnouncementFeature", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Features")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.AnnouncementReport", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementReports")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("AnnouncementReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Attachment", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Attachments")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.City", b =>
                {
                    b.HasOne("Baitkm.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Conversation", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "AnnouncementCreator")
                        .WithMany("CreatedConversations")
                        .HasForeignKey("AnnouncementCreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Conversations")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "Questioner")
                        .WithMany("QuestionedConversations")
                        .HasForeignKey("QuestionerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Baitkm.Entities.DeviceToken", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("DeviceTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Fact", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Facts")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Favourite", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Favourites")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("Favourites")
                        .HasForeignKey("GuestId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.Message", b =>
                {
                    b.HasOne("Baitkm.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.NotificationTranslate", b =>
                {
                    b.HasOne("Baitkm.Entities.Notification", "Notification")
                        .WithMany("NotificationTranslate")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Password", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.PersonNotification", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("GuestId");

                    b.HasOne("Baitkm.Entities.Notification", "Notification")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("NotificationId");

                    b.HasOne("Baitkm.Entities.PushNotification", "PushNotification")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("PushNotificationId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.PersonOtherSetting", b =>
                {
                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithOne("PersonOtherSetting")
                        .HasForeignKey("Baitkm.Entities.PersonOtherSetting", "GuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithOne("PersonOtherSetting")
                        .HasForeignKey("Baitkm.Entities.PersonOtherSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.PersonSetting", b =>
                {
                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("PersonSettings")
                        .HasForeignKey("GuestId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("PersonSettings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.PushNotificationTranslate", b =>
                {
                    b.HasOne("Baitkm.Entities.PushNotification", "PushNotification")
                        .WithMany("PushNotificationTranslates")
                        .HasForeignKey("PushNotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Rating", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("Ratings")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("Ratings")
                        .HasForeignKey("GuestId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.SaveFilter", b =>
                {
                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("SaveFilters")
                        .HasForeignKey("GuestId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("SaveFilters")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.SaveFilterFeature", b =>
                {
                    b.HasOne("Baitkm.Entities.SaveFilter", "SaveFilter")
                        .WithMany("Features")
                        .HasForeignKey("SaveFilterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Statistic", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.SubscribeAnnouncement", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("SubscribeAnnouncements")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("SubscribeAnnouncements")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("SubscribeAnnouncements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.SupportConversation", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "Admin")
                        .WithMany("SupportConversations")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithOne("SupportConversation")
                        .HasForeignKey("Baitkm.Entities.SupportConversation", "GuestId");

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithOne("SupportConversation")
                        .HasForeignKey("Baitkm.Entities.SupportConversation", "UserId");
                });

            modelBuilder.Entity("Baitkm.Entities.SupportMessage", b =>
                {
                    b.HasOne("Baitkm.Entities.Guest", "GuestSender")
                        .WithMany("SupportMessages")
                        .HasForeignKey("GuestSenderId");

                    b.HasOne("Baitkm.Entities.SupportConversation", "SupportConversation")
                        .WithMany("SupportMessages")
                        .HasForeignKey("SupportConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "UserSender")
                        .WithMany("SupportMessages")
                        .HasForeignKey("UserSenderId");
                });

            modelBuilder.Entity("Baitkm.Entities.User", b =>
                {
                    b.HasOne("Baitkm.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Baitkm.Entities.UserLocation", b =>
                {
                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithOne("UserLocation")
                        .HasForeignKey("Baitkm.Entities.UserLocation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.ViewedAnnouncement", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("ViewedAnnouncements")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("ViewedAnnouncements")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("ViewedAnnouncements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Baitkm.Entities.Watched", b =>
                {
                    b.HasOne("Baitkm.Entities.Announcement", "Announcement")
                        .WithMany("watcheds")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.Guest", "Guest")
                        .WithMany("Watcheds")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Baitkm.Entities.User", "User")
                        .WithMany("Watcheds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
